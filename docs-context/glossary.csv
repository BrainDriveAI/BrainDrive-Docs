term,definition,canonical_spelling,category
BrainDrive,"The open-source, self-hosted AI platform that provides complete ownership and control over your AI system. Always capitalize as one word.","BrainDrive","Core Platform"
BrainDrive-Core,"The main repository containing the core system (frontend + backend). Hyphenated when referring to the specific repository.","BrainDrive-Core","Core Platform"
Personal AI,"AI system owned and controlled by an individual, as opposed to corporate AI. Preferred term over ""private AI.""","Personal AI","Core Platform"
Your AI. Your Rules.,"Official tagline for BrainDrive. Always include periods after both ""AI"" and ""Rules."" Maintain exact capitalization.","Your AI. Your Rules.","Core Platform"
BrainDrive Owner,"A person who uses BrainDrive. Never use ""user"" - always ""owner"" to emphasize ownership and control.","BrainDrive Owner","User Types"
BrainDrive Builder,"Developers, tinkerers, or anyone creating custom plugins, components, or extending BrainDrive functionality.","BrainDrive Builder","User Types"
BrainDrive Entrepreneur,"Individuals leveraging BrainDrive to build and monetize AI-powered tools, services, or products.","BrainDrive Entrepreneur","User Types"
Backend,"The Python FastAPI server component that provides APIs, database management, and core services. Handles authentication, plugin management, and data persistence.","Backend","Core Components"
Frontend,"The React+TypeScript web application that provides the user interface. Also called ""BrainDrive PluginStudio"" in some contexts.","Frontend","Core Components"
BrainDrive Studio,"The visual page builder interface that allows owners to create custom pages by dragging and dropping plugin components. Also called ""Page Builder.""","BrainDrive Studio","Core Components"
Page Builder,"The drag-and-drop visual editor within BrainDrive Studio for creating custom user interfaces without coding.","Page Builder","Core Components"
Plugin Manager,"Built-in interface for browsing, installing, removing, and managing plugins through a visual interface.","Plugin Manager","Core Components"
Plugin,"A self-contained module (usually a Git repository) that extends BrainDrive functionality. Can include frontend components, backend logic, or both.","Plugin","Plugin System"
Plugin Template,"Official boilerplate repository (BrainDrive-PluginTemplate) that provides starting code structure for new plugin development.","Plugin Template","Plugin System"
Lifecycle Manager,"Python class (lifecycle_manager.py) that defines how a plugin is installed, uninstalled, and managed. Implements methods like install_plugin(), delete_plugin(), and get_plugin_status().","Lifecycle Manager","Plugin System"
Plugin Manifest,"Configuration that defines what components a plugin offers and their settings. Read by BrainDrive Studio to present configuration options.","Plugin Manifest","Plugin System"
Module Federation,"Webpack technology that allows plugins to be loaded dynamically at runtime without full application reload.","Module Federation","Plugin System"
remoteEntry.js,"The main entry point file for frontend plugins, exposed via webpack federation for dynamic loading.","remoteEntry.js","Plugin System"
Service Bridges,"Six core services that plugins use to interact with the BrainDrive system without direct dependencies. Ensures loose coupling and forward compatibility.","Service Bridges","Service Architecture"
API Bridge,"Service for making backend API calls, e.g., services.api.get('/endpoint').","API Bridge","Service Architecture"
Event Bridge,"Service for cross-plugin communication via events, e.g., services.event.emit('eventName', data).","Event Bridge","Service Architecture"
Theme Bridge,"Service for accessing theme information and responding to theme changes, e.g., services.theme.getCurrentTheme().","Theme Bridge","Service Architecture"
Settings Bridge,"Service for user preferences and settings management, e.g., services.settings.getSetting('key').","Settings Bridge","Service Architecture"
Page Context Bridge,"Service for accessing current page/route information, e.g., services.pageContext.getContext().","Page Context Bridge","Service Architecture"
Plugin State Bridge,"Service for persistent plugin-specific data storage, e.g., services.pluginState.save(data).","Plugin State Bridge","Service Architecture"
FastAPI,"High-performance Python web framework used for the BrainDrive backend API.","FastAPI","Technical Components"
SQLModel,"ORM built on SQLAlchemy and Pydantic, used for database models in the backend.","SQLModel","Technical Components"
Uvicorn,"ASGI server that runs the FastAPI application in both development and production.","Uvicorn","Technical Components"
React 18,"JavaScript library used for building the frontend user interface components.","React 18","Technical Components"
Vite,"Build tool used for frontend development, providing hot-reload and optimized production builds.","Vite","Technical Components"
Material-UI (MUI),"React component framework implementing Google's Material Design, used for consistent UI components.","Material-UI (MUI)","Technical Components"
React Grid Layout,"Library providing the draggable and resizable grid system in the Page Builder.","React Grid Layout","Technical Components"
SQLite,"Default lightweight database used by BrainDrive for data persistence. Can be upgraded to other databases if needed.","SQLite","Database & Storage"
Alembic,"Database migration tool used to handle schema changes over time.","Alembic","Database & Storage"
JWT (JSON Web Tokens),"Authentication method used for access and refresh tokens in BrainDrive's security system.","JWT","Database & Storage"
Development Mode,"Local development setup using uvicorn main:app --reload for backend and npm run dev for frontend. Includes hot-reloading and debug features.","Development Mode","Development Terms"
Production Mode,"Deployment configuration with APP_ENV=prod, optimized builds, and process managers like systemd.","Production Mode","Development Terms"
Hot-reload,"Development feature that automatically updates the application when code changes are detected.","Hot-reload","Development Terms"
1-minute development cycle,"BrainDrive's goal for rapid plugin development iteration - edit code, build, see updates within one minute.","1-minute development cycle","Development Terms"
AI Provider,"Backend abstraction for different AI model sources (local models like Ollama or API-based models).","AI Provider","AI & Model Terms"
Ollama,"Local large language model provider that can be integrated via plugin for private AI inference.","Ollama","AI & Model Terms"
Conversation Management,"Built-in system for handling chat history, message threads, and conversation metadata.","Conversation Management","AI & Model Terms"
Canvas,"The main area in BrainDrive Studio where plugin components are placed and arranged.","Canvas","User Interface Terms"
Component,"Individual UI elements provided by plugins that can be added to pages (e.g., chat component, data visualization component).","Component","User Interface Terms"
Properties Panel,"Interface in BrainDrive Studio for configuring component settings and properties.","Properties Panel","User Interface Terms"
Layout,"The arrangement and sizing of components on a page. Can be exported/imported as JSON.","Layout","User Interface Terms"
Responsive Design,"Support for multiple screen sizes (desktop, tablet, mobile) in the Page Builder.","Responsive Design","User Interface Terms"
Conda Environment,"Recommended Python environment manager for BrainDrive development (e.g., BrainDriveDev).","Conda Environment","Installation & Deployment"
Two-terminal Setup,"Development requirement: one terminal for backend server, one for frontend development server.","Two-terminal Setup","Installation & Deployment"
Static File Server,"Production deployment method for serving the built frontend files (frontend/dist).","Static File Server","Installation & Deployment"
Reverse Proxy,"Production setup component (like nginx) placed in front of the backend for SSL and load balancing.","Reverse Proxy","Installation & Deployment"
MIT License,"Open-source license used by BrainDrive, ensuring freedom to use, modify, and distribute.","MIT License","Community & Ecosystem"
Self-hosted,"Deployment model where owners run BrainDrive on their own infrastructure rather than using a hosted service.","Self-hosted","Community & Ecosystem"
Open Beta,"Current development stage (v0.6.x) where core features are operational but still being polished.","Open Beta","Community & Ecosystem"
GitHub Repository,"Standard hosting location for BrainDrive core and plugin code, used for installation and updates.","GitHub Repository","Community & Ecosystem"
Big Tech,"Refers to large technology corporations that provide AI services with restrictions. BrainDrive positions itself as an alternative to Big Tech AI control.","Big Tech","Brand & Messaging"
Lock-in,"Vendor dependency that BrainDrive explicitly avoids. ""No lock-ins"" is a key value proposition.","Lock-in","Brand & Messaging"
Ownership,"Core principle: complete control over AI system, data, and innovations with no corporate interference.","Ownership","Brand & Messaging"
Freedom,"Core principle: ability to build, distribute, and operate AI systems without restrictions.","Freedom","Brand & Messaging"
Empowerment,"Core principle: democratizing AI technology to enable individual capability and potential.","Empowerment","Brand & Messaging"
Sustainability,"Core principle: self-sustaining ecosystem driven by value creation rather than restrictions.","Sustainability","Brand & Messaging"
backend/,"Directory containing the Python FastAPI server code, database, and plugin files.","backend/","File & Directory Terms"
frontend/,"Directory containing the React application code and build files.","frontend/","File & Directory Terms"
plugins/,"Directory structure for storing installed plugin files and shared plugin resources.","plugins/","File & Directory Terms"
dist/,"Directory containing built/compiled files ready for production deployment.","dist/","File & Directory Terms"
.env,"Environment configuration file containing settings like ports, debug flags, and API keys.",".env","File & Directory Terms"
requirements.txt,"Python dependencies file listing all required packages for the backend.","requirements.txt","File & Directory Terms"
package.json,"Node.js dependencies and metadata file for frontend and plugin projects.","package.json","File & Directory Terms"
Error Boundaries,"React components that catch and gracefully handle JavaScript errors in the frontend.","Error Boundaries","Error Handling & Debugging"
Structured Logging,"Consistent, JSON-formatted logging system (Structlog) used in the backend for debugging.","Structured Logging","Error Handling & Debugging"
Health Endpoints,"API endpoints for monitoring system status and availability.","Health Endpoints","Error Handling & Debugging"
Plugin Repair,"Feature allowing plugins to be reinstalled/fixed if they encounter issues.","Plugin Repair","Error Handling & Debugging"
Plugin Versioning,"System for tracking and managing different versions of installed plugins per user.","Plugin Versioning","Version & Release Terms"
Universal Lifecycle API,"Standardized REST endpoints that work with any plugin following the lifecycle interface.","Universal Lifecycle API","Version & Release Terms"
User-scoped,"Plugin installation model where each user controls their own plugin versions independently.","User-scoped","Version & Release Terms"
Hot-swap,"Ability to install/uninstall plugins without restarting the core application.","Hot-swap","Version & Release Terms"
